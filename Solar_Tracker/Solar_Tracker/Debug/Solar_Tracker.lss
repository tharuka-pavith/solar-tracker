
Solar_Tracker.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000272  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000021e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000272  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009af  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000074f  00000000  00000000  00000cdb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000379  00000000  00000000  0000142a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  000017a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004a5  00000000  00000000  00001838  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002f0  00000000  00000000  00001cdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001fcd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e1       	ldi	r30, 0x1E	; 30
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 30       	cpi	r26, 0x00	; 0
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 bf 00 	call	0x17e	; 0x17e <main>
  9e:	0c 94 0d 01 	jmp	0x21a	; 0x21a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <analogRead>:
int analogRead(int channel) {
	// Function to read the analog value from the specified channel
	// Implement the analog-to-digital conversion for your specific microcontroller
	// and return the 10-bit ADC value for the given channel.
	
	ADMUX = (ADMUX & 0x20) | (channel & 0x0F);
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	90 81       	ld	r25, Z
  ac:	90 72       	andi	r25, 0x20	; 32
  ae:	8f 70       	andi	r24, 0x0F	; 15
  b0:	89 2b       	or	r24, r25
  b2:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); //start A/D conversion
  b4:	ea e7       	ldi	r30, 0x7A	; 122
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	80 64       	ori	r24, 0x40	; 64
  bc:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC)); //wait until conversion complete
  be:	80 81       	ld	r24, Z
  c0:	86 fd       	sbrc	r24, 6
  c2:	fd cf       	rjmp	.-6      	; 0xbe <analogRead+0x18>
	return ADC;
  c4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
  c8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
}
  cc:	08 95       	ret

000000ce <ADC_config>:
	return 0;
}

void ADC_config(void)
{
	ADCSRA |= (1 << ADEN); //Enable ADC
  ce:	ea e7       	ldi	r30, 0x7A	; 122
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	80 68       	ori	r24, 0x80	; 128
  d6:	80 83       	st	Z, r24
	ADCSRA |= 0x07; //Set pre-scalar = 128
  d8:	80 81       	ld	r24, Z
  da:	87 60       	ori	r24, 0x07	; 7
  dc:	80 83       	st	Z, r24
  de:	08 95       	ret

000000e0 <USART_init>:
}

void USART_init(void)
{
	UBRR0H = (uint8_t) (UBRR_VALUE >> 8); //Set upper byte
  e0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = (uint8_t) (UBRR_VALUE); //Set lower byte
  e4:	87 e6       	ldi	r24, 0x67	; 103
  e6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UCSR0B = (1 << TXEN0); //enable transmitter
  ea:	88 e0       	ldi	r24, 0x08	; 8
  ec:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	UCSR0C = (0<<USBS0)|(3<<UCSZ00);
  f0:	86 e0       	ldi	r24, 0x06	; 6
  f2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
  f6:	08 95       	ret

000000f8 <transmit_USART>:
	//UCSR0C = (3 << UCSZ00); //set no. of data bits = 8
}

void transmit_USART(unsigned char data)
{
	while (!(UCSR0A & (1 << UDRE0))); //wait until transmit buffer is ready
  f8:	e0 ec       	ldi	r30, 0xC0	; 192
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	90 81       	ld	r25, Z
  fe:	95 ff       	sbrs	r25, 5
 100:	fd cf       	rjmp	.-6      	; 0xfc <transmit_USART+0x4>
	UDR0 = data; //put data to TX buffer
 102:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 106:	08 95       	ret

00000108 <display_ADC>:
}

void display_ADC(int value)
{
 108:	ef 92       	push	r14
 10a:	ff 92       	push	r15
 10c:	0f 93       	push	r16
 10e:	1f 93       	push	r17
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	ec 01       	movw	r28, r24
	hundreds = (value % 1000)/100;
	tens = (value%100)/10;
	ones = (value%10);

	
	transmit_USART('0' + thousands);
 116:	68 ee       	ldi	r22, 0xE8	; 232
 118:	73 e0       	ldi	r23, 0x03	; 3
 11a:	0e 94 e5 00 	call	0x1ca	; 0x1ca <__divmodhi4>
 11e:	7c 01       	movw	r14, r24
 120:	80 e3       	ldi	r24, 0x30	; 48
 122:	86 0f       	add	r24, r22
 124:	0e 94 7c 00 	call	0xf8	; 0xf8 <transmit_USART>
	transmit_USART('0' + hundreds);
 128:	04 e6       	ldi	r16, 0x64	; 100
 12a:	10 e0       	ldi	r17, 0x00	; 0
 12c:	c7 01       	movw	r24, r14
 12e:	b8 01       	movw	r22, r16
 130:	0e 94 e5 00 	call	0x1ca	; 0x1ca <__divmodhi4>
 134:	80 e3       	ldi	r24, 0x30	; 48
 136:	86 0f       	add	r24, r22
 138:	0e 94 7c 00 	call	0xf8	; 0xf8 <transmit_USART>
	transmit_USART('0' + tens);
 13c:	ce 01       	movw	r24, r28
 13e:	b8 01       	movw	r22, r16
 140:	0e 94 e5 00 	call	0x1ca	; 0x1ca <__divmodhi4>
 144:	0a e0       	ldi	r16, 0x0A	; 10
 146:	10 e0       	ldi	r17, 0x00	; 0
 148:	b8 01       	movw	r22, r16
 14a:	0e 94 e5 00 	call	0x1ca	; 0x1ca <__divmodhi4>
 14e:	80 e3       	ldi	r24, 0x30	; 48
 150:	86 0f       	add	r24, r22
 152:	0e 94 7c 00 	call	0xf8	; 0xf8 <transmit_USART>
	transmit_USART('0' + ones);
 156:	ce 01       	movw	r24, r28
 158:	b8 01       	movw	r22, r16
 15a:	0e 94 e5 00 	call	0x1ca	; 0x1ca <__divmodhi4>
 15e:	80 5d       	subi	r24, 0xD0	; 208
 160:	0e 94 7c 00 	call	0xf8	; 0xf8 <transmit_USART>
	transmit_USART(0x0A);
 164:	8a e0       	ldi	r24, 0x0A	; 10
 166:	0e 94 7c 00 	call	0xf8	; 0xf8 <transmit_USART>
	transmit_USART(0x0D);
 16a:	8d e0       	ldi	r24, 0x0D	; 13
 16c:	0e 94 7c 00 	call	0xf8	; 0xf8 <transmit_USART>
	
}
 170:	df 91       	pop	r29
 172:	cf 91       	pop	r28
 174:	1f 91       	pop	r17
 176:	0f 91       	pop	r16
 178:	ff 90       	pop	r15
 17a:	ef 90       	pop	r14
 17c:	08 95       	ret

0000017e <main>:
	return ADC;
}


int main(void) {
	ADC_config();
 17e:	0e 94 67 00 	call	0xce	; 0xce <ADC_config>
	USART_init();
 182:	0e 94 70 00 	call	0xe0	; 0xe0 <USART_init>
	
	int val = 0;
	while (1) {
		val = analogRead(0);
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	0e 94 53 00 	call	0xa6	; 0xa6 <analogRead>
		display_ADC(val);
 18e:	0e 94 84 00 	call	0x108	; 0x108 <display_ADC>
		
		val = analogRead(1);
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 53 00 	call	0xa6	; 0xa6 <analogRead>
		display_ADC(val);
 19a:	0e 94 84 00 	call	0x108	; 0x108 <display_ADC>
		
		val = analogRead(2);
 19e:	82 e0       	ldi	r24, 0x02	; 2
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 53 00 	call	0xa6	; 0xa6 <analogRead>
		display_ADC(val);
 1a6:	0e 94 84 00 	call	0x108	; 0x108 <display_ADC>
		
		val = analogRead(3);
 1aa:	83 e0       	ldi	r24, 0x03	; 3
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	0e 94 53 00 	call	0xa6	; 0xa6 <analogRead>
		display_ADC(val);
 1b2:	0e 94 84 00 	call	0x108	; 0x108 <display_ADC>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b6:	2f ef       	ldi	r18, 0xFF	; 255
 1b8:	89 e6       	ldi	r24, 0x69	; 105
 1ba:	98 e1       	ldi	r25, 0x18	; 24
 1bc:	21 50       	subi	r18, 0x01	; 1
 1be:	80 40       	sbci	r24, 0x00	; 0
 1c0:	90 40       	sbci	r25, 0x00	; 0
 1c2:	e1 f7       	brne	.-8      	; 0x1bc <main+0x3e>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <main+0x48>
 1c6:	00 00       	nop
 1c8:	de cf       	rjmp	.-68     	; 0x186 <main+0x8>

000001ca <__divmodhi4>:
 1ca:	97 fb       	bst	r25, 7
 1cc:	07 2e       	mov	r0, r23
 1ce:	16 f4       	brtc	.+4      	; 0x1d4 <__divmodhi4+0xa>
 1d0:	00 94       	com	r0
 1d2:	07 d0       	rcall	.+14     	; 0x1e2 <__divmodhi4_neg1>
 1d4:	77 fd       	sbrc	r23, 7
 1d6:	09 d0       	rcall	.+18     	; 0x1ea <__divmodhi4_neg2>
 1d8:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <__udivmodhi4>
 1dc:	07 fc       	sbrc	r0, 7
 1de:	05 d0       	rcall	.+10     	; 0x1ea <__divmodhi4_neg2>
 1e0:	3e f4       	brtc	.+14     	; 0x1f0 <__divmodhi4_exit>

000001e2 <__divmodhi4_neg1>:
 1e2:	90 95       	com	r25
 1e4:	81 95       	neg	r24
 1e6:	9f 4f       	sbci	r25, 0xFF	; 255
 1e8:	08 95       	ret

000001ea <__divmodhi4_neg2>:
 1ea:	70 95       	com	r23
 1ec:	61 95       	neg	r22
 1ee:	7f 4f       	sbci	r23, 0xFF	; 255

000001f0 <__divmodhi4_exit>:
 1f0:	08 95       	ret

000001f2 <__udivmodhi4>:
 1f2:	aa 1b       	sub	r26, r26
 1f4:	bb 1b       	sub	r27, r27
 1f6:	51 e1       	ldi	r21, 0x11	; 17
 1f8:	07 c0       	rjmp	.+14     	; 0x208 <__udivmodhi4_ep>

000001fa <__udivmodhi4_loop>:
 1fa:	aa 1f       	adc	r26, r26
 1fc:	bb 1f       	adc	r27, r27
 1fe:	a6 17       	cp	r26, r22
 200:	b7 07       	cpc	r27, r23
 202:	10 f0       	brcs	.+4      	; 0x208 <__udivmodhi4_ep>
 204:	a6 1b       	sub	r26, r22
 206:	b7 0b       	sbc	r27, r23

00000208 <__udivmodhi4_ep>:
 208:	88 1f       	adc	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	5a 95       	dec	r21
 20e:	a9 f7       	brne	.-22     	; 0x1fa <__udivmodhi4_loop>
 210:	80 95       	com	r24
 212:	90 95       	com	r25
 214:	bc 01       	movw	r22, r24
 216:	cd 01       	movw	r24, r26
 218:	08 95       	ret

0000021a <_exit>:
 21a:	f8 94       	cli

0000021c <__stop_program>:
 21c:	ff cf       	rjmp	.-2      	; 0x21c <__stop_program>
