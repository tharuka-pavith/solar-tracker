
Solar_Tracker.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000099e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000094a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000099e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a9d  00000000  00000000  00000a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007af  00000000  00000000  000014fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003fa  00000000  00000000  00001cac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e8  00000000  00000000  000020a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004e8  00000000  00000000  00002190  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000879  00000000  00000000  00002678  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00002ef1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e4       	ldi	r30, 0x4A	; 74
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 30       	cpi	r26, 0x00	; 0
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 59 02 	call	0x4b2	; 0x4b2 <main>
  9e:	0c 94 a3 04 	jmp	0x946	; 0x946 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <analogRead>:
int analogRead(int channel) {
	// Function to read the analog value from the specified channel
	// Implement the analog-to-digital conversion for your specific micro-controller
	// and return the 10-bit ADC value for the given channel.
	
	ADMUX = (ADMUX & 0x20) | (channel & 0x0F);
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	90 81       	ld	r25, Z
  ac:	90 72       	andi	r25, 0x20	; 32
  ae:	8f 70       	andi	r24, 0x0F	; 15
  b0:	89 2b       	or	r24, r25
  b2:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); //start A/D conversion
  b4:	ea e7       	ldi	r30, 0x7A	; 122
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	80 64       	ori	r24, 0x40	; 64
  bc:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC)); //wait until conversion complete
  be:	80 81       	ld	r24, Z
  c0:	86 fd       	sbrc	r24, 6
  c2:	fd cf       	rjmp	.-6      	; 0xbe <analogRead+0x18>
	return ADC;
  c4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
  c8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
}
  cc:	08 95       	ret

000000ce <ADC_config>:
	return 0;
}

void ADC_config(void)
{
	ADCSRA |= (1 << ADEN); //Enable ADC
  ce:	ea e7       	ldi	r30, 0x7A	; 122
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	80 68       	ori	r24, 0x80	; 128
  d6:	80 83       	st	Z, r24
	ADCSRA |= 0x07; //Set pre-scalar = 128
  d8:	80 81       	ld	r24, Z
  da:	87 60       	ori	r24, 0x07	; 7
  dc:	80 83       	st	Z, r24
  de:	08 95       	ret

000000e0 <USART_init>:
}

void USART_init(void)
{
	UBRR0H = (uint8_t) (UBRR_VALUE >> 8); //Set upper byte
  e0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = (uint8_t) (UBRR_VALUE); //Set lower byte
  e4:	87 e6       	ldi	r24, 0x67	; 103
  e6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UCSR0B = (1 << TXEN0); //enable transmitter
  ea:	88 e0       	ldi	r24, 0x08	; 8
  ec:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	UCSR0C = (0<<USBS0)|(3<<UCSZ00);
  f0:	86 e0       	ldi	r24, 0x06	; 6
  f2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
  f6:	08 95       	ret

000000f8 <transmit_USART>:
	//UCSR0C = (3 << UCSZ00); //set no. of data bits = 8
}

void transmit_USART(unsigned char data)
{
	while (!(UCSR0A & (1 << UDRE0))); //wait until transmit buffer is ready
  f8:	e0 ec       	ldi	r30, 0xC0	; 192
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	90 81       	ld	r25, Z
  fe:	95 ff       	sbrs	r25, 5
 100:	fd cf       	rjmp	.-6      	; 0xfc <transmit_USART+0x4>
	UDR0 = data; //put data to TX buffer
 102:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 106:	08 95       	ret

00000108 <display_ADC>:
}

void display_ADC(int value)
{
 108:	ef 92       	push	r14
 10a:	ff 92       	push	r15
 10c:	0f 93       	push	r16
 10e:	1f 93       	push	r17
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	ec 01       	movw	r28, r24
	hundreds = (value % 1000)/100;
	tens = (value%100)/10;
	ones = (value%10);

	
	transmit_USART('0' + thousands);
 116:	68 ee       	ldi	r22, 0xE8	; 232
 118:	73 e0       	ldi	r23, 0x03	; 3
 11a:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <__divmodhi4>
 11e:	7c 01       	movw	r14, r24
 120:	80 e3       	ldi	r24, 0x30	; 48
 122:	86 0f       	add	r24, r22
 124:	0e 94 7c 00 	call	0xf8	; 0xf8 <transmit_USART>
	transmit_USART('0' + hundreds);
 128:	04 e6       	ldi	r16, 0x64	; 100
 12a:	10 e0       	ldi	r17, 0x00	; 0
 12c:	c7 01       	movw	r24, r14
 12e:	b8 01       	movw	r22, r16
 130:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <__divmodhi4>
 134:	80 e3       	ldi	r24, 0x30	; 48
 136:	86 0f       	add	r24, r22
 138:	0e 94 7c 00 	call	0xf8	; 0xf8 <transmit_USART>
	transmit_USART('0' + tens);
 13c:	ce 01       	movw	r24, r28
 13e:	b8 01       	movw	r22, r16
 140:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <__divmodhi4>
 144:	0a e0       	ldi	r16, 0x0A	; 10
 146:	10 e0       	ldi	r17, 0x00	; 0
 148:	b8 01       	movw	r22, r16
 14a:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <__divmodhi4>
 14e:	80 e3       	ldi	r24, 0x30	; 48
 150:	86 0f       	add	r24, r22
 152:	0e 94 7c 00 	call	0xf8	; 0xf8 <transmit_USART>
	transmit_USART('0' + ones);
 156:	ce 01       	movw	r24, r28
 158:	b8 01       	movw	r22, r16
 15a:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <__divmodhi4>
 15e:	80 5d       	subi	r24, 0xD0	; 208
 160:	0e 94 7c 00 	call	0xf8	; 0xf8 <transmit_USART>
	transmit_USART(0x0A);
 164:	8a e0       	ldi	r24, 0x0A	; 10
 166:	0e 94 7c 00 	call	0xf8	; 0xf8 <transmit_USART>
	transmit_USART(0x0D);
 16a:	8d e0       	ldi	r24, 0x0D	; 13
 16c:	0e 94 7c 00 	call	0xf8	; 0xf8 <transmit_USART>
	
}
 170:	df 91       	pop	r29
 172:	cf 91       	pop	r28
 174:	1f 91       	pop	r17
 176:	0f 91       	pop	r16
 178:	ff 90       	pop	r15
 17a:	ef 90       	pop	r14
 17c:	08 95       	ret

0000017e <get_optimum_angle>:



int get_optimum_angle(void){
 17e:	8f 92       	push	r8
 180:	9f 92       	push	r9
 182:	af 92       	push	r10
 184:	bf 92       	push	r11
 186:	cf 92       	push	r12
 188:	df 92       	push	r13
 18a:	ef 92       	push	r14
 18c:	ff 92       	push	r15
 18e:	0f 93       	push	r16
 190:	1f 93       	push	r17
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
 196:	cd b7       	in	r28, 0x3d	; 61
 198:	de b7       	in	r29, 0x3e	; 62
 19a:	28 97       	sbiw	r28, 0x08	; 8
 19c:	0f b6       	in	r0, 0x3f	; 63
 19e:	f8 94       	cli
 1a0:	de bf       	out	0x3e, r29	; 62
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	cd bf       	out	0x3d, r28	; 61
	int width = 50;
	//int optimum_angle = 0;
	
	int max_ADC = 0; //0 - 1023
	int max_index = 0; // index of the max_ADC in the array
	int ADC_array[] = {0,0,0,0} ; // [0,0,0,0]
 1a6:	fe 01       	movw	r30, r28
 1a8:	31 96       	adiw	r30, 0x01	; 1
 1aa:	88 e0       	ldi	r24, 0x08	; 8
 1ac:	df 01       	movw	r26, r30
 1ae:	1d 92       	st	X+, r1
 1b0:	8a 95       	dec	r24
 1b2:	e9 f7       	brne	.-6      	; 0x1ae <get_optimum_angle+0x30>
 1b4:	7f 01       	movw	r14, r30
	
	
	for (int i = 0; i < 4; i++)
 1b6:	00 e0       	ldi	r16, 0x00	; 0
 1b8:	10 e0       	ldi	r17, 0x00	; 0
int get_optimum_angle(void){
	int width = 50;
	//int optimum_angle = 0;
	
	int max_ADC = 0; //0 - 1023
	int max_index = 0; // index of the max_ADC in the array
 1ba:	a1 2c       	mov	r10, r1
 1bc:	b1 2c       	mov	r11, r1

int get_optimum_angle(void){
	int width = 50;
	//int optimum_angle = 0;
	
	int max_ADC = 0; //0 - 1023
 1be:	c1 2c       	mov	r12, r1
 1c0:	d1 2c       	mov	r13, r1
	int ADC_array[] = {0,0,0,0} ; // [0,0,0,0]
	
	
	for (int i = 0; i < 4; i++)
	{
		ADC_array[i] = analogRead(i);
 1c2:	c8 01       	movw	r24, r16
 1c4:	0e 94 53 00 	call	0xa6	; 0xa6 <analogRead>
 1c8:	f7 01       	movw	r30, r14
 1ca:	81 93       	st	Z+, r24
 1cc:	91 93       	st	Z+, r25
 1ce:	7f 01       	movw	r14, r30
		if(ADC_array[i] > max_ADC)
 1d0:	c8 16       	cp	r12, r24
 1d2:	d9 06       	cpc	r13, r25
 1d4:	14 f4       	brge	.+4      	; 0x1da <get_optimum_angle+0x5c>
 1d6:	58 01       	movw	r10, r16
		{
			max_index = i;
			max_ADC = ADC_array[i];
 1d8:	6c 01       	movw	r12, r24
	int max_ADC = 0; //0 - 1023
	int max_index = 0; // index of the max_ADC in the array
	int ADC_array[] = {0,0,0,0} ; // [0,0,0,0]
	
	
	for (int i = 0; i < 4; i++)
 1da:	0f 5f       	subi	r16, 0xFF	; 255
 1dc:	1f 4f       	sbci	r17, 0xFF	; 255
 1de:	04 30       	cpi	r16, 0x04	; 4
 1e0:	11 05       	cpc	r17, r1
 1e2:	79 f7       	brne	.-34     	; 0x1c2 <get_optimum_angle+0x44>
	
	int A1 = max_ADC;
	int A2;
	
	
	if (max_index == 0)
 1e4:	a1 14       	cp	r10, r1
 1e6:	b1 04       	cpc	r11, r1
 1e8:	a9 f5       	brne	.+106    	; 0x254 <get_optimum_angle+0xd6>
	{
		A2 = ADC_array[1];
 1ea:	0b 81       	ldd	r16, Y+3	; 0x03
 1ec:	1c 81       	ldd	r17, Y+4	; 0x04
		float x_bar = width * ( (A1 + 2 * A2) / (3.0 * (A1 + A2)) );
 1ee:	b8 01       	movw	r22, r16
 1f0:	66 0f       	add	r22, r22
 1f2:	77 1f       	adc	r23, r23
 1f4:	c6 0e       	add	r12, r22
 1f6:	d7 1e       	adc	r13, r23
		return (15 + x_bar);
 1f8:	b6 01       	movw	r22, r12
 1fa:	0d 2c       	mov	r0, r13
 1fc:	00 0c       	add	r0, r0
 1fe:	88 0b       	sbc	r24, r24
 200:	99 0b       	sbc	r25, r25
 202:	0e 94 82 03 	call	0x704	; 0x704 <__floatsisf>
 206:	4b 01       	movw	r8, r22
 208:	5c 01       	movw	r10, r24
 20a:	b6 01       	movw	r22, r12
 20c:	60 1b       	sub	r22, r16
 20e:	71 0b       	sbc	r23, r17
 210:	07 2e       	mov	r0, r23
 212:	00 0c       	add	r0, r0
 214:	88 0b       	sbc	r24, r24
 216:	99 0b       	sbc	r25, r25
 218:	0e 94 82 03 	call	0x704	; 0x704 <__floatsisf>
 21c:	20 e0       	ldi	r18, 0x00	; 0
 21e:	30 e0       	ldi	r19, 0x00	; 0
 220:	40 e4       	ldi	r20, 0x40	; 64
 222:	50 e4       	ldi	r21, 0x40	; 64
 224:	0e 94 0e 04 	call	0x81c	; 0x81c <__mulsf3>
 228:	9b 01       	movw	r18, r22
 22a:	ac 01       	movw	r20, r24
 22c:	c5 01       	movw	r24, r10
 22e:	b4 01       	movw	r22, r8
 230:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <__divsf3>
 234:	20 e0       	ldi	r18, 0x00	; 0
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	48 e4       	ldi	r20, 0x48	; 72
 23a:	52 e4       	ldi	r21, 0x42	; 66
 23c:	0e 94 0e 04 	call	0x81c	; 0x81c <__mulsf3>
 240:	20 e0       	ldi	r18, 0x00	; 0
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	40 e7       	ldi	r20, 0x70	; 112
 246:	51 e4       	ldi	r21, 0x41	; 65
 248:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <__addsf3>
 24c:	0e 94 4a 03 	call	0x694	; 0x694 <__fixsfsi>
 250:	cb 01       	movw	r24, r22
 252:	1c c1       	rjmp	.+568    	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
	}
	else if(max_index == 3)
 254:	f3 e0       	ldi	r31, 0x03	; 3
 256:	af 16       	cp	r10, r31
 258:	b1 04       	cpc	r11, r1
 25a:	b9 f5       	brne	.+110    	; 0x2ca <get_optimum_angle+0x14c>
	{
		A2 = ADC_array[2];
 25c:	0d 81       	ldd	r16, Y+5	; 0x05
 25e:	1e 81       	ldd	r17, Y+6	; 0x06
		float x_bar = width * ( (A1 + 2 * A2) / (3.0 * (A1 + A2)) );
 260:	b8 01       	movw	r22, r16
 262:	66 0f       	add	r22, r22
 264:	77 1f       	adc	r23, r23
 266:	c6 0e       	add	r12, r22
 268:	d7 1e       	adc	r13, r23
		return (165 - x_bar);
 26a:	b6 01       	movw	r22, r12
 26c:	0d 2c       	mov	r0, r13
 26e:	00 0c       	add	r0, r0
 270:	88 0b       	sbc	r24, r24
 272:	99 0b       	sbc	r25, r25
 274:	0e 94 82 03 	call	0x704	; 0x704 <__floatsisf>
 278:	4b 01       	movw	r8, r22
 27a:	5c 01       	movw	r10, r24
 27c:	b6 01       	movw	r22, r12
 27e:	60 1b       	sub	r22, r16
 280:	71 0b       	sbc	r23, r17
 282:	07 2e       	mov	r0, r23
 284:	00 0c       	add	r0, r0
 286:	88 0b       	sbc	r24, r24
 288:	99 0b       	sbc	r25, r25
 28a:	0e 94 82 03 	call	0x704	; 0x704 <__floatsisf>
 28e:	20 e0       	ldi	r18, 0x00	; 0
 290:	30 e0       	ldi	r19, 0x00	; 0
 292:	40 e4       	ldi	r20, 0x40	; 64
 294:	50 e4       	ldi	r21, 0x40	; 64
 296:	0e 94 0e 04 	call	0x81c	; 0x81c <__mulsf3>
 29a:	9b 01       	movw	r18, r22
 29c:	ac 01       	movw	r20, r24
 29e:	c5 01       	movw	r24, r10
 2a0:	b4 01       	movw	r22, r8
 2a2:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <__divsf3>
 2a6:	20 e0       	ldi	r18, 0x00	; 0
 2a8:	30 e0       	ldi	r19, 0x00	; 0
 2aa:	48 e4       	ldi	r20, 0x48	; 72
 2ac:	52 e4       	ldi	r21, 0x42	; 66
 2ae:	0e 94 0e 04 	call	0x81c	; 0x81c <__mulsf3>
 2b2:	9b 01       	movw	r18, r22
 2b4:	ac 01       	movw	r20, r24
 2b6:	60 e0       	ldi	r22, 0x00	; 0
 2b8:	70 e0       	ldi	r23, 0x00	; 0
 2ba:	85 e2       	ldi	r24, 0x25	; 37
 2bc:	93 e4       	ldi	r25, 0x43	; 67
 2be:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <__subsf3>
 2c2:	0e 94 4a 03 	call	0x694	; 0x694 <__fixsfsi>
 2c6:	cb 01       	movw	r24, r22
 2c8:	e1 c0       	rjmp	.+450    	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
	}
	else if (max_index == 1)
 2ca:	aa 94       	dec	r10
 2cc:	ab 28       	or	r10, r11
 2ce:	09 f0       	breq	.+2      	; 0x2d2 <get_optimum_angle+0x154>
 2d0:	6f c0       	rjmp	.+222    	; 0x3b0 <get_optimum_angle+0x232>
	{
		if (ADC_array[0] > ADC_array[2])
 2d2:	e9 80       	ldd	r14, Y+1	; 0x01
 2d4:	fa 80       	ldd	r15, Y+2	; 0x02
 2d6:	0d 81       	ldd	r16, Y+5	; 0x05
 2d8:	1e 81       	ldd	r17, Y+6	; 0x06
 2da:	0e 15       	cp	r16, r14
 2dc:	1f 05       	cpc	r17, r15
 2de:	ac f5       	brge	.+106    	; 0x34a <get_optimum_angle+0x1cc>
		{
			A2 = ADC_array[0];
			float x_bar = width * ( (A1 + 2 * A2) / (3.0 * (A1 + A2)) );
 2e0:	b7 01       	movw	r22, r14
 2e2:	66 0f       	add	r22, r22
 2e4:	77 1f       	adc	r23, r23
 2e6:	c6 0e       	add	r12, r22
 2e8:	d7 1e       	adc	r13, r23
			return (65 - x_bar);
 2ea:	b6 01       	movw	r22, r12
 2ec:	0d 2c       	mov	r0, r13
 2ee:	00 0c       	add	r0, r0
 2f0:	88 0b       	sbc	r24, r24
 2f2:	99 0b       	sbc	r25, r25
 2f4:	0e 94 82 03 	call	0x704	; 0x704 <__floatsisf>
 2f8:	4b 01       	movw	r8, r22
 2fa:	5c 01       	movw	r10, r24
 2fc:	b6 01       	movw	r22, r12
 2fe:	6e 19       	sub	r22, r14
 300:	7f 09       	sbc	r23, r15
 302:	07 2e       	mov	r0, r23
 304:	00 0c       	add	r0, r0
 306:	88 0b       	sbc	r24, r24
 308:	99 0b       	sbc	r25, r25
 30a:	0e 94 82 03 	call	0x704	; 0x704 <__floatsisf>
 30e:	20 e0       	ldi	r18, 0x00	; 0
 310:	30 e0       	ldi	r19, 0x00	; 0
 312:	40 e4       	ldi	r20, 0x40	; 64
 314:	50 e4       	ldi	r21, 0x40	; 64
 316:	0e 94 0e 04 	call	0x81c	; 0x81c <__mulsf3>
 31a:	9b 01       	movw	r18, r22
 31c:	ac 01       	movw	r20, r24
 31e:	c5 01       	movw	r24, r10
 320:	b4 01       	movw	r22, r8
 322:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <__divsf3>
 326:	20 e0       	ldi	r18, 0x00	; 0
 328:	30 e0       	ldi	r19, 0x00	; 0
 32a:	48 e4       	ldi	r20, 0x48	; 72
 32c:	52 e4       	ldi	r21, 0x42	; 66
 32e:	0e 94 0e 04 	call	0x81c	; 0x81c <__mulsf3>
 332:	9b 01       	movw	r18, r22
 334:	ac 01       	movw	r20, r24
 336:	60 e0       	ldi	r22, 0x00	; 0
 338:	70 e0       	ldi	r23, 0x00	; 0
 33a:	82 e8       	ldi	r24, 0x82	; 130
 33c:	92 e4       	ldi	r25, 0x42	; 66
 33e:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <__subsf3>
 342:	0e 94 4a 03 	call	0x694	; 0x694 <__fixsfsi>
 346:	cb 01       	movw	r24, r22
 348:	a1 c0       	rjmp	.+322    	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
		}
		else
		{
			A2 = ADC_array[2];
			float x_bar = width * ( (A1 + 2 * A2) / (3.0 * (A1 + A2)) );
 34a:	b8 01       	movw	r22, r16
 34c:	66 0f       	add	r22, r22
 34e:	77 1f       	adc	r23, r23
 350:	c6 0e       	add	r12, r22
 352:	d7 1e       	adc	r13, r23
			return (65 + x_bar);	
 354:	b6 01       	movw	r22, r12
 356:	0d 2c       	mov	r0, r13
 358:	00 0c       	add	r0, r0
 35a:	88 0b       	sbc	r24, r24
 35c:	99 0b       	sbc	r25, r25
 35e:	0e 94 82 03 	call	0x704	; 0x704 <__floatsisf>
 362:	4b 01       	movw	r8, r22
 364:	5c 01       	movw	r10, r24
 366:	b6 01       	movw	r22, r12
 368:	60 1b       	sub	r22, r16
 36a:	71 0b       	sbc	r23, r17
 36c:	07 2e       	mov	r0, r23
 36e:	00 0c       	add	r0, r0
 370:	88 0b       	sbc	r24, r24
 372:	99 0b       	sbc	r25, r25
 374:	0e 94 82 03 	call	0x704	; 0x704 <__floatsisf>
 378:	20 e0       	ldi	r18, 0x00	; 0
 37a:	30 e0       	ldi	r19, 0x00	; 0
 37c:	40 e4       	ldi	r20, 0x40	; 64
 37e:	50 e4       	ldi	r21, 0x40	; 64
 380:	0e 94 0e 04 	call	0x81c	; 0x81c <__mulsf3>
 384:	9b 01       	movw	r18, r22
 386:	ac 01       	movw	r20, r24
 388:	c5 01       	movw	r24, r10
 38a:	b4 01       	movw	r22, r8
 38c:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <__divsf3>
 390:	20 e0       	ldi	r18, 0x00	; 0
 392:	30 e0       	ldi	r19, 0x00	; 0
 394:	48 e4       	ldi	r20, 0x48	; 72
 396:	52 e4       	ldi	r21, 0x42	; 66
 398:	0e 94 0e 04 	call	0x81c	; 0x81c <__mulsf3>
 39c:	20 e0       	ldi	r18, 0x00	; 0
 39e:	30 e0       	ldi	r19, 0x00	; 0
 3a0:	42 e8       	ldi	r20, 0x82	; 130
 3a2:	52 e4       	ldi	r21, 0x42	; 66
 3a4:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <__addsf3>
 3a8:	0e 94 4a 03 	call	0x694	; 0x694 <__fixsfsi>
 3ac:	cb 01       	movw	r24, r22
 3ae:	6e c0       	rjmp	.+220    	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
		}
	}
	else
	{
		if (ADC_array[1] > ADC_array[3])
 3b0:	eb 80       	ldd	r14, Y+3	; 0x03
 3b2:	fc 80       	ldd	r15, Y+4	; 0x04
 3b4:	0f 81       	ldd	r16, Y+7	; 0x07
 3b6:	18 85       	ldd	r17, Y+8	; 0x08
 3b8:	0e 15       	cp	r16, r14
 3ba:	1f 05       	cpc	r17, r15
 3bc:	ac f5       	brge	.+106    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
		{
			A2 = ADC_array[1];
			float x_bar = width * ( (A1 + 2 * A2) / (3.0 * (A1 + A2)) );
 3be:	b7 01       	movw	r22, r14
 3c0:	66 0f       	add	r22, r22
 3c2:	77 1f       	adc	r23, r23
 3c4:	c6 0e       	add	r12, r22
 3c6:	d7 1e       	adc	r13, r23
			return (115 - x_bar);
 3c8:	b6 01       	movw	r22, r12
 3ca:	0d 2c       	mov	r0, r13
 3cc:	00 0c       	add	r0, r0
 3ce:	88 0b       	sbc	r24, r24
 3d0:	99 0b       	sbc	r25, r25
 3d2:	0e 94 82 03 	call	0x704	; 0x704 <__floatsisf>
 3d6:	4b 01       	movw	r8, r22
 3d8:	5c 01       	movw	r10, r24
 3da:	b6 01       	movw	r22, r12
 3dc:	6e 19       	sub	r22, r14
 3de:	7f 09       	sbc	r23, r15
 3e0:	07 2e       	mov	r0, r23
 3e2:	00 0c       	add	r0, r0
 3e4:	88 0b       	sbc	r24, r24
 3e6:	99 0b       	sbc	r25, r25
 3e8:	0e 94 82 03 	call	0x704	; 0x704 <__floatsisf>
 3ec:	20 e0       	ldi	r18, 0x00	; 0
 3ee:	30 e0       	ldi	r19, 0x00	; 0
 3f0:	40 e4       	ldi	r20, 0x40	; 64
 3f2:	50 e4       	ldi	r21, 0x40	; 64
 3f4:	0e 94 0e 04 	call	0x81c	; 0x81c <__mulsf3>
 3f8:	9b 01       	movw	r18, r22
 3fa:	ac 01       	movw	r20, r24
 3fc:	c5 01       	movw	r24, r10
 3fe:	b4 01       	movw	r22, r8
 400:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <__divsf3>
 404:	20 e0       	ldi	r18, 0x00	; 0
 406:	30 e0       	ldi	r19, 0x00	; 0
 408:	48 e4       	ldi	r20, 0x48	; 72
 40a:	52 e4       	ldi	r21, 0x42	; 66
 40c:	0e 94 0e 04 	call	0x81c	; 0x81c <__mulsf3>
 410:	9b 01       	movw	r18, r22
 412:	ac 01       	movw	r20, r24
 414:	60 e0       	ldi	r22, 0x00	; 0
 416:	70 e0       	ldi	r23, 0x00	; 0
 418:	86 ee       	ldi	r24, 0xE6	; 230
 41a:	92 e4       	ldi	r25, 0x42	; 66
 41c:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <__subsf3>
 420:	0e 94 4a 03 	call	0x694	; 0x694 <__fixsfsi>
 424:	cb 01       	movw	r24, r22
 426:	32 c0       	rjmp	.+100    	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
		}
		else
		{
			A2 = ADC_array[3];
			float x_bar = width * ( (A1 + 2 * A2) / (3.0 * (A1 + A2)) );
 428:	b8 01       	movw	r22, r16
 42a:	66 0f       	add	r22, r22
 42c:	77 1f       	adc	r23, r23
 42e:	c6 0e       	add	r12, r22
 430:	d7 1e       	adc	r13, r23
			return (115 + x_bar);
 432:	b6 01       	movw	r22, r12
 434:	0d 2c       	mov	r0, r13
 436:	00 0c       	add	r0, r0
 438:	88 0b       	sbc	r24, r24
 43a:	99 0b       	sbc	r25, r25
 43c:	0e 94 82 03 	call	0x704	; 0x704 <__floatsisf>
 440:	4b 01       	movw	r8, r22
 442:	5c 01       	movw	r10, r24
 444:	b6 01       	movw	r22, r12
 446:	60 1b       	sub	r22, r16
 448:	71 0b       	sbc	r23, r17
 44a:	07 2e       	mov	r0, r23
 44c:	00 0c       	add	r0, r0
 44e:	88 0b       	sbc	r24, r24
 450:	99 0b       	sbc	r25, r25
 452:	0e 94 82 03 	call	0x704	; 0x704 <__floatsisf>
 456:	20 e0       	ldi	r18, 0x00	; 0
 458:	30 e0       	ldi	r19, 0x00	; 0
 45a:	40 e4       	ldi	r20, 0x40	; 64
 45c:	50 e4       	ldi	r21, 0x40	; 64
 45e:	0e 94 0e 04 	call	0x81c	; 0x81c <__mulsf3>
 462:	9b 01       	movw	r18, r22
 464:	ac 01       	movw	r20, r24
 466:	c5 01       	movw	r24, r10
 468:	b4 01       	movw	r22, r8
 46a:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <__divsf3>
 46e:	20 e0       	ldi	r18, 0x00	; 0
 470:	30 e0       	ldi	r19, 0x00	; 0
 472:	48 e4       	ldi	r20, 0x48	; 72
 474:	52 e4       	ldi	r21, 0x42	; 66
 476:	0e 94 0e 04 	call	0x81c	; 0x81c <__mulsf3>
 47a:	20 e0       	ldi	r18, 0x00	; 0
 47c:	30 e0       	ldi	r19, 0x00	; 0
 47e:	46 ee       	ldi	r20, 0xE6	; 230
 480:	52 e4       	ldi	r21, 0x42	; 66
 482:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <__addsf3>
 486:	0e 94 4a 03 	call	0x694	; 0x694 <__fixsfsi>
 48a:	cb 01       	movw	r24, r22
		}	
	}
}
 48c:	28 96       	adiw	r28, 0x08	; 8
 48e:	0f b6       	in	r0, 0x3f	; 63
 490:	f8 94       	cli
 492:	de bf       	out	0x3e, r29	; 62
 494:	0f be       	out	0x3f, r0	; 63
 496:	cd bf       	out	0x3d, r28	; 61
 498:	df 91       	pop	r29
 49a:	cf 91       	pop	r28
 49c:	1f 91       	pop	r17
 49e:	0f 91       	pop	r16
 4a0:	ff 90       	pop	r15
 4a2:	ef 90       	pop	r14
 4a4:	df 90       	pop	r13
 4a6:	cf 90       	pop	r12
 4a8:	bf 90       	pop	r11
 4aa:	af 90       	pop	r10
 4ac:	9f 90       	pop	r9
 4ae:	8f 90       	pop	r8
 4b0:	08 95       	ret

000004b2 <main>:
	while (ADCSRA & (1 << ADSC)); //wait until conversion complete
	return ADC;
}

int main(void) {
	ADC_config();
 4b2:	0e 94 67 00 	call	0xce	; 0xce <ADC_config>
	USART_init();
 4b6:	0e 94 70 00 	call	0xe0	; 0xe0 <USART_init>
	
	int val = 0;
	while (1) {
		val = get_optimum_angle();
 4ba:	0e 94 bf 00 	call	0x17e	; 0x17e <get_optimum_angle>
		display_ADC(val);
 4be:	0e 94 84 00 	call	0x108	; 0x108 <display_ADC>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4c2:	2f ef       	ldi	r18, 0xFF	; 255
 4c4:	89 e6       	ldi	r24, 0x69	; 105
 4c6:	98 e1       	ldi	r25, 0x18	; 24
 4c8:	21 50       	subi	r18, 0x01	; 1
 4ca:	80 40       	sbci	r24, 0x00	; 0
 4cc:	90 40       	sbci	r25, 0x00	; 0
 4ce:	e1 f7       	brne	.-8      	; 0x4c8 <main+0x16>
 4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <main+0x20>
 4d2:	00 00       	nop
 4d4:	f2 cf       	rjmp	.-28     	; 0x4ba <main+0x8>

000004d6 <__subsf3>:
 4d6:	50 58       	subi	r21, 0x80	; 128

000004d8 <__addsf3>:
 4d8:	bb 27       	eor	r27, r27
 4da:	aa 27       	eor	r26, r26
 4dc:	0e 94 83 02 	call	0x506	; 0x506 <__addsf3x>
 4e0:	0c 94 d4 03 	jmp	0x7a8	; 0x7a8 <__fp_round>
 4e4:	0e 94 c6 03 	call	0x78c	; 0x78c <__fp_pscA>
 4e8:	38 f0       	brcs	.+14     	; 0x4f8 <__addsf3+0x20>
 4ea:	0e 94 cd 03 	call	0x79a	; 0x79a <__fp_pscB>
 4ee:	20 f0       	brcs	.+8      	; 0x4f8 <__addsf3+0x20>
 4f0:	39 f4       	brne	.+14     	; 0x500 <__addsf3+0x28>
 4f2:	9f 3f       	cpi	r25, 0xFF	; 255
 4f4:	19 f4       	brne	.+6      	; 0x4fc <__addsf3+0x24>
 4f6:	26 f4       	brtc	.+8      	; 0x500 <__addsf3+0x28>
 4f8:	0c 94 c3 03 	jmp	0x786	; 0x786 <__fp_nan>
 4fc:	0e f4       	brtc	.+2      	; 0x500 <__addsf3+0x28>
 4fe:	e0 95       	com	r30
 500:	e7 fb       	bst	r30, 7
 502:	0c 94 bd 03 	jmp	0x77a	; 0x77a <__fp_inf>

00000506 <__addsf3x>:
 506:	e9 2f       	mov	r30, r25
 508:	0e 94 e5 03 	call	0x7ca	; 0x7ca <__fp_split3>
 50c:	58 f3       	brcs	.-42     	; 0x4e4 <__addsf3+0xc>
 50e:	ba 17       	cp	r27, r26
 510:	62 07       	cpc	r22, r18
 512:	73 07       	cpc	r23, r19
 514:	84 07       	cpc	r24, r20
 516:	95 07       	cpc	r25, r21
 518:	20 f0       	brcs	.+8      	; 0x522 <__addsf3x+0x1c>
 51a:	79 f4       	brne	.+30     	; 0x53a <__addsf3x+0x34>
 51c:	a6 f5       	brtc	.+104    	; 0x586 <__addsf3x+0x80>
 51e:	0c 94 07 04 	jmp	0x80e	; 0x80e <__fp_zero>
 522:	0e f4       	brtc	.+2      	; 0x526 <__addsf3x+0x20>
 524:	e0 95       	com	r30
 526:	0b 2e       	mov	r0, r27
 528:	ba 2f       	mov	r27, r26
 52a:	a0 2d       	mov	r26, r0
 52c:	0b 01       	movw	r0, r22
 52e:	b9 01       	movw	r22, r18
 530:	90 01       	movw	r18, r0
 532:	0c 01       	movw	r0, r24
 534:	ca 01       	movw	r24, r20
 536:	a0 01       	movw	r20, r0
 538:	11 24       	eor	r1, r1
 53a:	ff 27       	eor	r31, r31
 53c:	59 1b       	sub	r21, r25
 53e:	99 f0       	breq	.+38     	; 0x566 <__addsf3x+0x60>
 540:	59 3f       	cpi	r21, 0xF9	; 249
 542:	50 f4       	brcc	.+20     	; 0x558 <__addsf3x+0x52>
 544:	50 3e       	cpi	r21, 0xE0	; 224
 546:	68 f1       	brcs	.+90     	; 0x5a2 <__addsf3x+0x9c>
 548:	1a 16       	cp	r1, r26
 54a:	f0 40       	sbci	r31, 0x00	; 0
 54c:	a2 2f       	mov	r26, r18
 54e:	23 2f       	mov	r18, r19
 550:	34 2f       	mov	r19, r20
 552:	44 27       	eor	r20, r20
 554:	58 5f       	subi	r21, 0xF8	; 248
 556:	f3 cf       	rjmp	.-26     	; 0x53e <__addsf3x+0x38>
 558:	46 95       	lsr	r20
 55a:	37 95       	ror	r19
 55c:	27 95       	ror	r18
 55e:	a7 95       	ror	r26
 560:	f0 40       	sbci	r31, 0x00	; 0
 562:	53 95       	inc	r21
 564:	c9 f7       	brne	.-14     	; 0x558 <__addsf3x+0x52>
 566:	7e f4       	brtc	.+30     	; 0x586 <__addsf3x+0x80>
 568:	1f 16       	cp	r1, r31
 56a:	ba 0b       	sbc	r27, r26
 56c:	62 0b       	sbc	r22, r18
 56e:	73 0b       	sbc	r23, r19
 570:	84 0b       	sbc	r24, r20
 572:	ba f0       	brmi	.+46     	; 0x5a2 <__addsf3x+0x9c>
 574:	91 50       	subi	r25, 0x01	; 1
 576:	a1 f0       	breq	.+40     	; 0x5a0 <__addsf3x+0x9a>
 578:	ff 0f       	add	r31, r31
 57a:	bb 1f       	adc	r27, r27
 57c:	66 1f       	adc	r22, r22
 57e:	77 1f       	adc	r23, r23
 580:	88 1f       	adc	r24, r24
 582:	c2 f7       	brpl	.-16     	; 0x574 <__addsf3x+0x6e>
 584:	0e c0       	rjmp	.+28     	; 0x5a2 <__addsf3x+0x9c>
 586:	ba 0f       	add	r27, r26
 588:	62 1f       	adc	r22, r18
 58a:	73 1f       	adc	r23, r19
 58c:	84 1f       	adc	r24, r20
 58e:	48 f4       	brcc	.+18     	; 0x5a2 <__addsf3x+0x9c>
 590:	87 95       	ror	r24
 592:	77 95       	ror	r23
 594:	67 95       	ror	r22
 596:	b7 95       	ror	r27
 598:	f7 95       	ror	r31
 59a:	9e 3f       	cpi	r25, 0xFE	; 254
 59c:	08 f0       	brcs	.+2      	; 0x5a0 <__addsf3x+0x9a>
 59e:	b0 cf       	rjmp	.-160    	; 0x500 <__addsf3+0x28>
 5a0:	93 95       	inc	r25
 5a2:	88 0f       	add	r24, r24
 5a4:	08 f0       	brcs	.+2      	; 0x5a8 <__addsf3x+0xa2>
 5a6:	99 27       	eor	r25, r25
 5a8:	ee 0f       	add	r30, r30
 5aa:	97 95       	ror	r25
 5ac:	87 95       	ror	r24
 5ae:	08 95       	ret

000005b0 <__divsf3>:
 5b0:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <__divsf3x>
 5b4:	0c 94 d4 03 	jmp	0x7a8	; 0x7a8 <__fp_round>
 5b8:	0e 94 cd 03 	call	0x79a	; 0x79a <__fp_pscB>
 5bc:	58 f0       	brcs	.+22     	; 0x5d4 <__divsf3+0x24>
 5be:	0e 94 c6 03 	call	0x78c	; 0x78c <__fp_pscA>
 5c2:	40 f0       	brcs	.+16     	; 0x5d4 <__divsf3+0x24>
 5c4:	29 f4       	brne	.+10     	; 0x5d0 <__divsf3+0x20>
 5c6:	5f 3f       	cpi	r21, 0xFF	; 255
 5c8:	29 f0       	breq	.+10     	; 0x5d4 <__divsf3+0x24>
 5ca:	0c 94 bd 03 	jmp	0x77a	; 0x77a <__fp_inf>
 5ce:	51 11       	cpse	r21, r1
 5d0:	0c 94 08 04 	jmp	0x810	; 0x810 <__fp_szero>
 5d4:	0c 94 c3 03 	jmp	0x786	; 0x786 <__fp_nan>

000005d8 <__divsf3x>:
 5d8:	0e 94 e5 03 	call	0x7ca	; 0x7ca <__fp_split3>
 5dc:	68 f3       	brcs	.-38     	; 0x5b8 <__divsf3+0x8>

000005de <__divsf3_pse>:
 5de:	99 23       	and	r25, r25
 5e0:	b1 f3       	breq	.-20     	; 0x5ce <__divsf3+0x1e>
 5e2:	55 23       	and	r21, r21
 5e4:	91 f3       	breq	.-28     	; 0x5ca <__divsf3+0x1a>
 5e6:	95 1b       	sub	r25, r21
 5e8:	55 0b       	sbc	r21, r21
 5ea:	bb 27       	eor	r27, r27
 5ec:	aa 27       	eor	r26, r26
 5ee:	62 17       	cp	r22, r18
 5f0:	73 07       	cpc	r23, r19
 5f2:	84 07       	cpc	r24, r20
 5f4:	38 f0       	brcs	.+14     	; 0x604 <__divsf3_pse+0x26>
 5f6:	9f 5f       	subi	r25, 0xFF	; 255
 5f8:	5f 4f       	sbci	r21, 0xFF	; 255
 5fa:	22 0f       	add	r18, r18
 5fc:	33 1f       	adc	r19, r19
 5fe:	44 1f       	adc	r20, r20
 600:	aa 1f       	adc	r26, r26
 602:	a9 f3       	breq	.-22     	; 0x5ee <__divsf3_pse+0x10>
 604:	35 d0       	rcall	.+106    	; 0x670 <__divsf3_pse+0x92>
 606:	0e 2e       	mov	r0, r30
 608:	3a f0       	brmi	.+14     	; 0x618 <__divsf3_pse+0x3a>
 60a:	e0 e8       	ldi	r30, 0x80	; 128
 60c:	32 d0       	rcall	.+100    	; 0x672 <__divsf3_pse+0x94>
 60e:	91 50       	subi	r25, 0x01	; 1
 610:	50 40       	sbci	r21, 0x00	; 0
 612:	e6 95       	lsr	r30
 614:	00 1c       	adc	r0, r0
 616:	ca f7       	brpl	.-14     	; 0x60a <__divsf3_pse+0x2c>
 618:	2b d0       	rcall	.+86     	; 0x670 <__divsf3_pse+0x92>
 61a:	fe 2f       	mov	r31, r30
 61c:	29 d0       	rcall	.+82     	; 0x670 <__divsf3_pse+0x92>
 61e:	66 0f       	add	r22, r22
 620:	77 1f       	adc	r23, r23
 622:	88 1f       	adc	r24, r24
 624:	bb 1f       	adc	r27, r27
 626:	26 17       	cp	r18, r22
 628:	37 07       	cpc	r19, r23
 62a:	48 07       	cpc	r20, r24
 62c:	ab 07       	cpc	r26, r27
 62e:	b0 e8       	ldi	r27, 0x80	; 128
 630:	09 f0       	breq	.+2      	; 0x634 <__divsf3_pse+0x56>
 632:	bb 0b       	sbc	r27, r27
 634:	80 2d       	mov	r24, r0
 636:	bf 01       	movw	r22, r30
 638:	ff 27       	eor	r31, r31
 63a:	93 58       	subi	r25, 0x83	; 131
 63c:	5f 4f       	sbci	r21, 0xFF	; 255
 63e:	3a f0       	brmi	.+14     	; 0x64e <__divsf3_pse+0x70>
 640:	9e 3f       	cpi	r25, 0xFE	; 254
 642:	51 05       	cpc	r21, r1
 644:	78 f0       	brcs	.+30     	; 0x664 <__divsf3_pse+0x86>
 646:	0c 94 bd 03 	jmp	0x77a	; 0x77a <__fp_inf>
 64a:	0c 94 08 04 	jmp	0x810	; 0x810 <__fp_szero>
 64e:	5f 3f       	cpi	r21, 0xFF	; 255
 650:	e4 f3       	brlt	.-8      	; 0x64a <__divsf3_pse+0x6c>
 652:	98 3e       	cpi	r25, 0xE8	; 232
 654:	d4 f3       	brlt	.-12     	; 0x64a <__divsf3_pse+0x6c>
 656:	86 95       	lsr	r24
 658:	77 95       	ror	r23
 65a:	67 95       	ror	r22
 65c:	b7 95       	ror	r27
 65e:	f7 95       	ror	r31
 660:	9f 5f       	subi	r25, 0xFF	; 255
 662:	c9 f7       	brne	.-14     	; 0x656 <__divsf3_pse+0x78>
 664:	88 0f       	add	r24, r24
 666:	91 1d       	adc	r25, r1
 668:	96 95       	lsr	r25
 66a:	87 95       	ror	r24
 66c:	97 f9       	bld	r25, 7
 66e:	08 95       	ret
 670:	e1 e0       	ldi	r30, 0x01	; 1
 672:	66 0f       	add	r22, r22
 674:	77 1f       	adc	r23, r23
 676:	88 1f       	adc	r24, r24
 678:	bb 1f       	adc	r27, r27
 67a:	62 17       	cp	r22, r18
 67c:	73 07       	cpc	r23, r19
 67e:	84 07       	cpc	r24, r20
 680:	ba 07       	cpc	r27, r26
 682:	20 f0       	brcs	.+8      	; 0x68c <__divsf3_pse+0xae>
 684:	62 1b       	sub	r22, r18
 686:	73 0b       	sbc	r23, r19
 688:	84 0b       	sbc	r24, r20
 68a:	ba 0b       	sbc	r27, r26
 68c:	ee 1f       	adc	r30, r30
 68e:	88 f7       	brcc	.-30     	; 0x672 <__divsf3_pse+0x94>
 690:	e0 95       	com	r30
 692:	08 95       	ret

00000694 <__fixsfsi>:
 694:	0e 94 51 03 	call	0x6a2	; 0x6a2 <__fixunssfsi>
 698:	68 94       	set
 69a:	b1 11       	cpse	r27, r1
 69c:	0c 94 08 04 	jmp	0x810	; 0x810 <__fp_szero>
 6a0:	08 95       	ret

000006a2 <__fixunssfsi>:
 6a2:	0e 94 ed 03 	call	0x7da	; 0x7da <__fp_splitA>
 6a6:	88 f0       	brcs	.+34     	; 0x6ca <__fixunssfsi+0x28>
 6a8:	9f 57       	subi	r25, 0x7F	; 127
 6aa:	98 f0       	brcs	.+38     	; 0x6d2 <__fixunssfsi+0x30>
 6ac:	b9 2f       	mov	r27, r25
 6ae:	99 27       	eor	r25, r25
 6b0:	b7 51       	subi	r27, 0x17	; 23
 6b2:	b0 f0       	brcs	.+44     	; 0x6e0 <__fixunssfsi+0x3e>
 6b4:	e1 f0       	breq	.+56     	; 0x6ee <__fixunssfsi+0x4c>
 6b6:	66 0f       	add	r22, r22
 6b8:	77 1f       	adc	r23, r23
 6ba:	88 1f       	adc	r24, r24
 6bc:	99 1f       	adc	r25, r25
 6be:	1a f0       	brmi	.+6      	; 0x6c6 <__fixunssfsi+0x24>
 6c0:	ba 95       	dec	r27
 6c2:	c9 f7       	brne	.-14     	; 0x6b6 <__fixunssfsi+0x14>
 6c4:	14 c0       	rjmp	.+40     	; 0x6ee <__fixunssfsi+0x4c>
 6c6:	b1 30       	cpi	r27, 0x01	; 1
 6c8:	91 f0       	breq	.+36     	; 0x6ee <__fixunssfsi+0x4c>
 6ca:	0e 94 07 04 	call	0x80e	; 0x80e <__fp_zero>
 6ce:	b1 e0       	ldi	r27, 0x01	; 1
 6d0:	08 95       	ret
 6d2:	0c 94 07 04 	jmp	0x80e	; 0x80e <__fp_zero>
 6d6:	67 2f       	mov	r22, r23
 6d8:	78 2f       	mov	r23, r24
 6da:	88 27       	eor	r24, r24
 6dc:	b8 5f       	subi	r27, 0xF8	; 248
 6de:	39 f0       	breq	.+14     	; 0x6ee <__fixunssfsi+0x4c>
 6e0:	b9 3f       	cpi	r27, 0xF9	; 249
 6e2:	cc f3       	brlt	.-14     	; 0x6d6 <__fixunssfsi+0x34>
 6e4:	86 95       	lsr	r24
 6e6:	77 95       	ror	r23
 6e8:	67 95       	ror	r22
 6ea:	b3 95       	inc	r27
 6ec:	d9 f7       	brne	.-10     	; 0x6e4 <__fixunssfsi+0x42>
 6ee:	3e f4       	brtc	.+14     	; 0x6fe <__fixunssfsi+0x5c>
 6f0:	90 95       	com	r25
 6f2:	80 95       	com	r24
 6f4:	70 95       	com	r23
 6f6:	61 95       	neg	r22
 6f8:	7f 4f       	sbci	r23, 0xFF	; 255
 6fa:	8f 4f       	sbci	r24, 0xFF	; 255
 6fc:	9f 4f       	sbci	r25, 0xFF	; 255
 6fe:	08 95       	ret

00000700 <__floatunsisf>:
 700:	e8 94       	clt
 702:	09 c0       	rjmp	.+18     	; 0x716 <__floatsisf+0x12>

00000704 <__floatsisf>:
 704:	97 fb       	bst	r25, 7
 706:	3e f4       	brtc	.+14     	; 0x716 <__floatsisf+0x12>
 708:	90 95       	com	r25
 70a:	80 95       	com	r24
 70c:	70 95       	com	r23
 70e:	61 95       	neg	r22
 710:	7f 4f       	sbci	r23, 0xFF	; 255
 712:	8f 4f       	sbci	r24, 0xFF	; 255
 714:	9f 4f       	sbci	r25, 0xFF	; 255
 716:	99 23       	and	r25, r25
 718:	a9 f0       	breq	.+42     	; 0x744 <__floatsisf+0x40>
 71a:	f9 2f       	mov	r31, r25
 71c:	96 e9       	ldi	r25, 0x96	; 150
 71e:	bb 27       	eor	r27, r27
 720:	93 95       	inc	r25
 722:	f6 95       	lsr	r31
 724:	87 95       	ror	r24
 726:	77 95       	ror	r23
 728:	67 95       	ror	r22
 72a:	b7 95       	ror	r27
 72c:	f1 11       	cpse	r31, r1
 72e:	f8 cf       	rjmp	.-16     	; 0x720 <__floatsisf+0x1c>
 730:	fa f4       	brpl	.+62     	; 0x770 <__floatsisf+0x6c>
 732:	bb 0f       	add	r27, r27
 734:	11 f4       	brne	.+4      	; 0x73a <__floatsisf+0x36>
 736:	60 ff       	sbrs	r22, 0
 738:	1b c0       	rjmp	.+54     	; 0x770 <__floatsisf+0x6c>
 73a:	6f 5f       	subi	r22, 0xFF	; 255
 73c:	7f 4f       	sbci	r23, 0xFF	; 255
 73e:	8f 4f       	sbci	r24, 0xFF	; 255
 740:	9f 4f       	sbci	r25, 0xFF	; 255
 742:	16 c0       	rjmp	.+44     	; 0x770 <__floatsisf+0x6c>
 744:	88 23       	and	r24, r24
 746:	11 f0       	breq	.+4      	; 0x74c <__floatsisf+0x48>
 748:	96 e9       	ldi	r25, 0x96	; 150
 74a:	11 c0       	rjmp	.+34     	; 0x76e <__floatsisf+0x6a>
 74c:	77 23       	and	r23, r23
 74e:	21 f0       	breq	.+8      	; 0x758 <__floatsisf+0x54>
 750:	9e e8       	ldi	r25, 0x8E	; 142
 752:	87 2f       	mov	r24, r23
 754:	76 2f       	mov	r23, r22
 756:	05 c0       	rjmp	.+10     	; 0x762 <__floatsisf+0x5e>
 758:	66 23       	and	r22, r22
 75a:	71 f0       	breq	.+28     	; 0x778 <__floatsisf+0x74>
 75c:	96 e8       	ldi	r25, 0x86	; 134
 75e:	86 2f       	mov	r24, r22
 760:	70 e0       	ldi	r23, 0x00	; 0
 762:	60 e0       	ldi	r22, 0x00	; 0
 764:	2a f0       	brmi	.+10     	; 0x770 <__floatsisf+0x6c>
 766:	9a 95       	dec	r25
 768:	66 0f       	add	r22, r22
 76a:	77 1f       	adc	r23, r23
 76c:	88 1f       	adc	r24, r24
 76e:	da f7       	brpl	.-10     	; 0x766 <__floatsisf+0x62>
 770:	88 0f       	add	r24, r24
 772:	96 95       	lsr	r25
 774:	87 95       	ror	r24
 776:	97 f9       	bld	r25, 7
 778:	08 95       	ret

0000077a <__fp_inf>:
 77a:	97 f9       	bld	r25, 7
 77c:	9f 67       	ori	r25, 0x7F	; 127
 77e:	80 e8       	ldi	r24, 0x80	; 128
 780:	70 e0       	ldi	r23, 0x00	; 0
 782:	60 e0       	ldi	r22, 0x00	; 0
 784:	08 95       	ret

00000786 <__fp_nan>:
 786:	9f ef       	ldi	r25, 0xFF	; 255
 788:	80 ec       	ldi	r24, 0xC0	; 192
 78a:	08 95       	ret

0000078c <__fp_pscA>:
 78c:	00 24       	eor	r0, r0
 78e:	0a 94       	dec	r0
 790:	16 16       	cp	r1, r22
 792:	17 06       	cpc	r1, r23
 794:	18 06       	cpc	r1, r24
 796:	09 06       	cpc	r0, r25
 798:	08 95       	ret

0000079a <__fp_pscB>:
 79a:	00 24       	eor	r0, r0
 79c:	0a 94       	dec	r0
 79e:	12 16       	cp	r1, r18
 7a0:	13 06       	cpc	r1, r19
 7a2:	14 06       	cpc	r1, r20
 7a4:	05 06       	cpc	r0, r21
 7a6:	08 95       	ret

000007a8 <__fp_round>:
 7a8:	09 2e       	mov	r0, r25
 7aa:	03 94       	inc	r0
 7ac:	00 0c       	add	r0, r0
 7ae:	11 f4       	brne	.+4      	; 0x7b4 <__fp_round+0xc>
 7b0:	88 23       	and	r24, r24
 7b2:	52 f0       	brmi	.+20     	; 0x7c8 <__fp_round+0x20>
 7b4:	bb 0f       	add	r27, r27
 7b6:	40 f4       	brcc	.+16     	; 0x7c8 <__fp_round+0x20>
 7b8:	bf 2b       	or	r27, r31
 7ba:	11 f4       	brne	.+4      	; 0x7c0 <__fp_round+0x18>
 7bc:	60 ff       	sbrs	r22, 0
 7be:	04 c0       	rjmp	.+8      	; 0x7c8 <__fp_round+0x20>
 7c0:	6f 5f       	subi	r22, 0xFF	; 255
 7c2:	7f 4f       	sbci	r23, 0xFF	; 255
 7c4:	8f 4f       	sbci	r24, 0xFF	; 255
 7c6:	9f 4f       	sbci	r25, 0xFF	; 255
 7c8:	08 95       	ret

000007ca <__fp_split3>:
 7ca:	57 fd       	sbrc	r21, 7
 7cc:	90 58       	subi	r25, 0x80	; 128
 7ce:	44 0f       	add	r20, r20
 7d0:	55 1f       	adc	r21, r21
 7d2:	59 f0       	breq	.+22     	; 0x7ea <__fp_splitA+0x10>
 7d4:	5f 3f       	cpi	r21, 0xFF	; 255
 7d6:	71 f0       	breq	.+28     	; 0x7f4 <__fp_splitA+0x1a>
 7d8:	47 95       	ror	r20

000007da <__fp_splitA>:
 7da:	88 0f       	add	r24, r24
 7dc:	97 fb       	bst	r25, 7
 7de:	99 1f       	adc	r25, r25
 7e0:	61 f0       	breq	.+24     	; 0x7fa <__fp_splitA+0x20>
 7e2:	9f 3f       	cpi	r25, 0xFF	; 255
 7e4:	79 f0       	breq	.+30     	; 0x804 <__fp_splitA+0x2a>
 7e6:	87 95       	ror	r24
 7e8:	08 95       	ret
 7ea:	12 16       	cp	r1, r18
 7ec:	13 06       	cpc	r1, r19
 7ee:	14 06       	cpc	r1, r20
 7f0:	55 1f       	adc	r21, r21
 7f2:	f2 cf       	rjmp	.-28     	; 0x7d8 <__fp_split3+0xe>
 7f4:	46 95       	lsr	r20
 7f6:	f1 df       	rcall	.-30     	; 0x7da <__fp_splitA>
 7f8:	08 c0       	rjmp	.+16     	; 0x80a <__fp_splitA+0x30>
 7fa:	16 16       	cp	r1, r22
 7fc:	17 06       	cpc	r1, r23
 7fe:	18 06       	cpc	r1, r24
 800:	99 1f       	adc	r25, r25
 802:	f1 cf       	rjmp	.-30     	; 0x7e6 <__fp_splitA+0xc>
 804:	86 95       	lsr	r24
 806:	71 05       	cpc	r23, r1
 808:	61 05       	cpc	r22, r1
 80a:	08 94       	sec
 80c:	08 95       	ret

0000080e <__fp_zero>:
 80e:	e8 94       	clt

00000810 <__fp_szero>:
 810:	bb 27       	eor	r27, r27
 812:	66 27       	eor	r22, r22
 814:	77 27       	eor	r23, r23
 816:	cb 01       	movw	r24, r22
 818:	97 f9       	bld	r25, 7
 81a:	08 95       	ret

0000081c <__mulsf3>:
 81c:	0e 94 21 04 	call	0x842	; 0x842 <__mulsf3x>
 820:	0c 94 d4 03 	jmp	0x7a8	; 0x7a8 <__fp_round>
 824:	0e 94 c6 03 	call	0x78c	; 0x78c <__fp_pscA>
 828:	38 f0       	brcs	.+14     	; 0x838 <__mulsf3+0x1c>
 82a:	0e 94 cd 03 	call	0x79a	; 0x79a <__fp_pscB>
 82e:	20 f0       	brcs	.+8      	; 0x838 <__mulsf3+0x1c>
 830:	95 23       	and	r25, r21
 832:	11 f0       	breq	.+4      	; 0x838 <__mulsf3+0x1c>
 834:	0c 94 bd 03 	jmp	0x77a	; 0x77a <__fp_inf>
 838:	0c 94 c3 03 	jmp	0x786	; 0x786 <__fp_nan>
 83c:	11 24       	eor	r1, r1
 83e:	0c 94 08 04 	jmp	0x810	; 0x810 <__fp_szero>

00000842 <__mulsf3x>:
 842:	0e 94 e5 03 	call	0x7ca	; 0x7ca <__fp_split3>
 846:	70 f3       	brcs	.-36     	; 0x824 <__mulsf3+0x8>

00000848 <__mulsf3_pse>:
 848:	95 9f       	mul	r25, r21
 84a:	c1 f3       	breq	.-16     	; 0x83c <__mulsf3+0x20>
 84c:	95 0f       	add	r25, r21
 84e:	50 e0       	ldi	r21, 0x00	; 0
 850:	55 1f       	adc	r21, r21
 852:	62 9f       	mul	r22, r18
 854:	f0 01       	movw	r30, r0
 856:	72 9f       	mul	r23, r18
 858:	bb 27       	eor	r27, r27
 85a:	f0 0d       	add	r31, r0
 85c:	b1 1d       	adc	r27, r1
 85e:	63 9f       	mul	r22, r19
 860:	aa 27       	eor	r26, r26
 862:	f0 0d       	add	r31, r0
 864:	b1 1d       	adc	r27, r1
 866:	aa 1f       	adc	r26, r26
 868:	64 9f       	mul	r22, r20
 86a:	66 27       	eor	r22, r22
 86c:	b0 0d       	add	r27, r0
 86e:	a1 1d       	adc	r26, r1
 870:	66 1f       	adc	r22, r22
 872:	82 9f       	mul	r24, r18
 874:	22 27       	eor	r18, r18
 876:	b0 0d       	add	r27, r0
 878:	a1 1d       	adc	r26, r1
 87a:	62 1f       	adc	r22, r18
 87c:	73 9f       	mul	r23, r19
 87e:	b0 0d       	add	r27, r0
 880:	a1 1d       	adc	r26, r1
 882:	62 1f       	adc	r22, r18
 884:	83 9f       	mul	r24, r19
 886:	a0 0d       	add	r26, r0
 888:	61 1d       	adc	r22, r1
 88a:	22 1f       	adc	r18, r18
 88c:	74 9f       	mul	r23, r20
 88e:	33 27       	eor	r19, r19
 890:	a0 0d       	add	r26, r0
 892:	61 1d       	adc	r22, r1
 894:	23 1f       	adc	r18, r19
 896:	84 9f       	mul	r24, r20
 898:	60 0d       	add	r22, r0
 89a:	21 1d       	adc	r18, r1
 89c:	82 2f       	mov	r24, r18
 89e:	76 2f       	mov	r23, r22
 8a0:	6a 2f       	mov	r22, r26
 8a2:	11 24       	eor	r1, r1
 8a4:	9f 57       	subi	r25, 0x7F	; 127
 8a6:	50 40       	sbci	r21, 0x00	; 0
 8a8:	9a f0       	brmi	.+38     	; 0x8d0 <__mulsf3_pse+0x88>
 8aa:	f1 f0       	breq	.+60     	; 0x8e8 <__mulsf3_pse+0xa0>
 8ac:	88 23       	and	r24, r24
 8ae:	4a f0       	brmi	.+18     	; 0x8c2 <__mulsf3_pse+0x7a>
 8b0:	ee 0f       	add	r30, r30
 8b2:	ff 1f       	adc	r31, r31
 8b4:	bb 1f       	adc	r27, r27
 8b6:	66 1f       	adc	r22, r22
 8b8:	77 1f       	adc	r23, r23
 8ba:	88 1f       	adc	r24, r24
 8bc:	91 50       	subi	r25, 0x01	; 1
 8be:	50 40       	sbci	r21, 0x00	; 0
 8c0:	a9 f7       	brne	.-22     	; 0x8ac <__mulsf3_pse+0x64>
 8c2:	9e 3f       	cpi	r25, 0xFE	; 254
 8c4:	51 05       	cpc	r21, r1
 8c6:	80 f0       	brcs	.+32     	; 0x8e8 <__mulsf3_pse+0xa0>
 8c8:	0c 94 bd 03 	jmp	0x77a	; 0x77a <__fp_inf>
 8cc:	0c 94 08 04 	jmp	0x810	; 0x810 <__fp_szero>
 8d0:	5f 3f       	cpi	r21, 0xFF	; 255
 8d2:	e4 f3       	brlt	.-8      	; 0x8cc <__mulsf3_pse+0x84>
 8d4:	98 3e       	cpi	r25, 0xE8	; 232
 8d6:	d4 f3       	brlt	.-12     	; 0x8cc <__mulsf3_pse+0x84>
 8d8:	86 95       	lsr	r24
 8da:	77 95       	ror	r23
 8dc:	67 95       	ror	r22
 8de:	b7 95       	ror	r27
 8e0:	f7 95       	ror	r31
 8e2:	e7 95       	ror	r30
 8e4:	9f 5f       	subi	r25, 0xFF	; 255
 8e6:	c1 f7       	brne	.-16     	; 0x8d8 <__mulsf3_pse+0x90>
 8e8:	fe 2b       	or	r31, r30
 8ea:	88 0f       	add	r24, r24
 8ec:	91 1d       	adc	r25, r1
 8ee:	96 95       	lsr	r25
 8f0:	87 95       	ror	r24
 8f2:	97 f9       	bld	r25, 7
 8f4:	08 95       	ret

000008f6 <__divmodhi4>:
 8f6:	97 fb       	bst	r25, 7
 8f8:	07 2e       	mov	r0, r23
 8fa:	16 f4       	brtc	.+4      	; 0x900 <__stack+0x1>
 8fc:	00 94       	com	r0
 8fe:	07 d0       	rcall	.+14     	; 0x90e <__divmodhi4_neg1>
 900:	77 fd       	sbrc	r23, 7
 902:	09 d0       	rcall	.+18     	; 0x916 <__divmodhi4_neg2>
 904:	0e 94 8f 04 	call	0x91e	; 0x91e <__udivmodhi4>
 908:	07 fc       	sbrc	r0, 7
 90a:	05 d0       	rcall	.+10     	; 0x916 <__divmodhi4_neg2>
 90c:	3e f4       	brtc	.+14     	; 0x91c <__divmodhi4_exit>

0000090e <__divmodhi4_neg1>:
 90e:	90 95       	com	r25
 910:	81 95       	neg	r24
 912:	9f 4f       	sbci	r25, 0xFF	; 255
 914:	08 95       	ret

00000916 <__divmodhi4_neg2>:
 916:	70 95       	com	r23
 918:	61 95       	neg	r22
 91a:	7f 4f       	sbci	r23, 0xFF	; 255

0000091c <__divmodhi4_exit>:
 91c:	08 95       	ret

0000091e <__udivmodhi4>:
 91e:	aa 1b       	sub	r26, r26
 920:	bb 1b       	sub	r27, r27
 922:	51 e1       	ldi	r21, 0x11	; 17
 924:	07 c0       	rjmp	.+14     	; 0x934 <__udivmodhi4_ep>

00000926 <__udivmodhi4_loop>:
 926:	aa 1f       	adc	r26, r26
 928:	bb 1f       	adc	r27, r27
 92a:	a6 17       	cp	r26, r22
 92c:	b7 07       	cpc	r27, r23
 92e:	10 f0       	brcs	.+4      	; 0x934 <__udivmodhi4_ep>
 930:	a6 1b       	sub	r26, r22
 932:	b7 0b       	sbc	r27, r23

00000934 <__udivmodhi4_ep>:
 934:	88 1f       	adc	r24, r24
 936:	99 1f       	adc	r25, r25
 938:	5a 95       	dec	r21
 93a:	a9 f7       	brne	.-22     	; 0x926 <__udivmodhi4_loop>
 93c:	80 95       	com	r24
 93e:	90 95       	com	r25
 940:	bc 01       	movw	r22, r24
 942:	cd 01       	movw	r24, r26
 944:	08 95       	ret

00000946 <_exit>:
 946:	f8 94       	cli

00000948 <__stop_program>:
 948:	ff cf       	rjmp	.-2      	; 0x948 <__stop_program>
